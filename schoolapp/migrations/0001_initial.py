# Generated by Django 4.1.1 on 2023-03-17 12:04

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(blank=True, default=False, null=True)),
                ('is_member_of_staff', models.BooleanField(default=False)),
                ('user_group', models.CharField(blank=True, choices=[('Admissions Office', 'Admissions Office'), ('Accounts Office', 'Accounts Office'), ('Dean Of Students Affairs Office', 'Dean Of Students Affairs Office'), ('ICT Office', 'ICT Office'), ('Program Coordinator or Principal Lecturer Office', 'Program Coordinator or Principal Lecturer Office'), ('Registrar Office', 'Registrar Office'), ('Lecturer', 'Lecturer'), ('Examinations Office', 'Examinations Office'), ('Other Staff', 'Other Staff')], max_length=60, null=True, verbose_name='User Group')),
                ('phone', models.CharField(blank=True, max_length=60, null=True)),
                ('picture', models.ImageField(blank=True, null=True, upload_to="users/pictures/%Y/%m/%d'")),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Admission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_date', models.DateField(auto_now=True)),
                ('first_name', models.CharField(default='', max_length=200, verbose_name='First Name')),
                ('last_name', models.CharField(default='', max_length=200, verbose_name='Last Name')),
                ('other_names', models.CharField(blank=True, max_length=200, null=True, verbose_name='Other Names')),
                ('nrc_no', models.CharField(help_text='each NRC can only be used once', max_length=200, unique=True, verbose_name='NRC Number')),
                ('phone_number', models.CharField(default='', max_length=13, verbose_name='Phone Number')),
                ('email', models.EmailField(help_text='Required for communication', max_length=200, verbose_name='Email Address')),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], default='Male', max_length=200, verbose_name='Gender')),
                ('date_of_birth', models.DateField(default=datetime.datetime(2005, 1, 1, 0, 0), max_length=200, verbose_name='DOB')),
                ('nationality', models.CharField(choices=[('Zambia', 'Zambia'), ('AD', 'Andorra'), ('AE', 'United Arab Emirates'), ('AF', 'Afghanistan'), ('AG', 'Antigua & Barbuda'), ('AI', 'Anguilla'), ('AL', 'Albania'), ('AM', 'Armenia'), ('AN', 'Netherlands Antilles'), ('Angola', 'Angola'), ('AQ', 'Antarctica'), ('AR', 'Argentina'), ('AS', 'American Samoa'), ('AT', 'Austria'), ('AU', 'Australia'), ('AW', 'Aruba'), ('AZ', 'Azerbaijan'), ('BA', 'Bosnia and Herzegovina'), ('BB', 'Barbados'), ('BD', 'Bangladesh'), ('BE', 'Belgium'), ('BF', 'Burkina Faso'), ('BG', 'Bulgaria'), ('BH', 'Bahrain'), ('BI', 'Burundi'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BN', 'Brunei Darussalam'), ('BO', 'Bolivia'), ('BR', 'Brazil'), ('BS', 'Bahama'), ('BT', 'Bhutan'), ('BV', 'Bouvet Island'), ('BW', 'Botswana'), ('BY', 'Belarus'), ('BZ', 'Belize'), ('CA', 'Canada'), ('CC', 'Cocos (Keeling) Islands'), ('CF', 'Central African Republic'), ('CG', 'Congo'), ('CH', 'Switzerland'), ('Ivory Coast', 'Ivory Coast'), ('CK', 'Cook Islands'), ('CL', 'Chile'), ('CM', 'Cameroon'), ('CN', 'China'), ('CO', 'Colombia'), ('CR', 'Costa Rica'), ('CU', 'Cuba'), ('Cape Verde', 'Cape Verde'), ('CX', 'Christmas Island'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DE', 'Germany'), ('DJ', 'Djibouti'), ('DK', 'Denmark'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('Algeria', 'Algeria'), ('EC', 'Ecuador'), ('EE', 'Estonia'), ('Egypt', 'Egypt'), ('EH', 'Western Sahara'), ('Eritrea', 'Eritrea'), ('ES', 'Spain'), ('Ethiopia', 'Ethiopia'), ('FI', 'Finland'), ('FJ', 'Fiji'), ('FK', 'Falkland Islands (Malvinas)'), ('FM', 'Micronesia'), ('FO', 'Faroe Islands'), ('FR', 'France'), ('FX', 'France, Metropolitan'), ('Gabon', 'Gabon'), ('GB', 'United Kingdom (Great Britain)'), ('GD', 'Grenada'), ('GE', 'Georgia'), ('GF', 'French Guiana'), ('Ghana', 'Ghana'), ('GI', 'Gibraltar'), ('GL', 'Greenland'), ('Gambia', 'Gambia'), ('Guinea', 'Guinea'), ('GP', 'Guadeloupe'), ('GQ', 'Equatorial Guinea'), ('GR', 'Greece'), ('GS', 'South Georgia and the South Sandwich Islands'), ('GT', 'Guatemala'), ('GU', 'Guam'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HK', 'Hong Kong'), ('HM', 'Heard & McDonald Islands'), ('HN', 'Honduras'), ('HR', 'Croatia'), ('HT', 'Haiti'), ('HU', 'Hungary'), ('ID', 'Indonesia'), ('IE', 'Ireland'), ('IL', 'Israel'), ('IN', 'India'), ('IO', 'British Indian Ocean Territory'), ('IQ', 'Iraq'), ('IR', 'Islamic Republic of Iran'), ('IS', 'Iceland'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JO', 'Jordan'), ('JP', 'Japan'), ('Kenya', 'Kenya'), ('KG', 'Kyrgyzstan'), ('KH', 'Cambodia'), ('KI', 'Kiribati'), ('Comoros', 'Comoros'), ('KN', 'St. Kitts and Nevis'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KY', 'Cayman Islands'), ('KZ', 'Kazakhstan'), ('LA', "Lao People's Democratic Republic"), ('LB', 'Lebanon'), ('LC', 'Saint Lucia'), ('LI', 'Liechtenstein'), ('LK', 'Sri Lanka'), ('Liberia', 'Liberia'), ('Lesotho', 'Lesotho'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('LV', 'Latvia'), ('Libya', 'Libya'), ('Morocco', 'Morocco'), ('MC', 'Monaco'), ('MD', 'Moldova, Republic of'), ('Madagascar', 'Madagascar'), ('MH', 'Marshall Islands'), ('Mali', 'Mali'), ('MN', 'Mongolia'), ('MM', 'Myanmar'), ('Macau', 'Macau'), ('MP', 'Northern Mariana Islands'), ('MQ', 'Martinique'), ('Mauritania', 'Mauritania'), ('MS', 'Monserrat'), ('MT', 'Malta'), ('Mauritius', 'Mauritius'), ('MV', 'Maldives'), ('Malawi', 'Malawi'), ('MX', 'Mexico'), ('MY', 'Malaysia'), ('Mozambique', 'Mozambique'), ('Namibia', 'Namibia'), ('NC', 'New Caledonia'), ('Niger', 'Niger'), ('NF', 'Norfolk Island'), ('Nigeria', 'Nigeria'), ('NI', 'Nicaragua'), ('NL', 'Netherlands'), ('NO', 'Norway'), ('NP', 'Nepal'), ('NR', 'Nauru'), ('NU', 'Niue'), ('New Zealand', 'New Zealand'), ('OM', 'Oman'), ('PA', 'Panama'), ('PE', 'Peru'), ('PF', 'French Polynesia'), ('PG', 'Papua New Guinea'), ('PH', 'Philippines'), ('PK', 'Pakistan'), ('PL', 'Poland'), ('PM', 'St. Pierre & Miquelon'), ('PN', 'Pitcairn'), ('PR', 'Puerto Rico'), ('PT', 'Portugal'), ('PW', 'Palau'), ('PY', 'Paraguay'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('Rwanda', 'Rwanda'), ('Saudi Arabia', 'Saudi Arabia'), ('Solomon Islands', 'Solomon Islands'), ('Seychelles', 'Seychelles'), ('Sudan', 'Sudan'), ('SE', 'Sweden'), ('SG', 'Singapore'), ('SH', 'St. Helena'), ('SI', 'Slovenia'), ('SJ', 'Svalbard & Jan Mayen Islands'), ('SK', 'Slovakia'), ('SL', 'Sierra Leone'), ('SM', 'San Marino'), ('Senegal', 'Senegal'), ('Somalia', 'Somalia'), ('SR', 'Suriname'), ('ST', 'Sao Tome & Principe'), ('SV', 'El Salvador'), ('SY', 'Syrian Arab Republic'), ('Swaziland', 'Swaziland'), ('TC', 'Turks & Caicos Islands'), ('Chad', 'Chad'), ('TF', 'French Southern Territories'), ('Togo', 'Togo'), ('TH', 'Thailand'), ('TJ', 'Tajikistan'), ('TK', 'Tokelau'), ('TM', 'Turkmenistan'), ('Tunisia', 'Tunisia'), ('Tonga', 'Tonga'), ('TP', 'East Timor'), ('Turkey', 'Turkey'), ('TT', 'Trinidad & Tobago'), ('TV', 'Tuvalu'), ('TW', 'Taiwan, Province of China'), ('Tanzania', 'Tanzania'), ('UA', 'Ukraine'), ('Uganda', 'Uganda'), ('UM', 'United States Minor Outlying Islands'), ('US', 'United States of America'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VA', 'Vatican City State (Holy See)'), ('VC', 'St. Vincent & the Grenadines'), ('VE', 'Venezuela'), ('VG', 'British Virgin Islands'), ('VI', 'United States Virgin Islands'), ('VN', 'Viet Nam'), ('VU', 'Vanuatu'), ('WF', 'Wallis & Futuna Islands'), ('WS', 'Samoa'), ('YE', 'Yemen'), ('YT', 'Mayotte'), ('Yugoslavia', 'Yugoslavia'), ('South Africa', 'South Africa'), ('Zambia', 'Zambia'), ('Zaire', 'Zaire'), ('Zimbabwe', 'Zimbabwe'), ('Unknown or unspecified country', 'Unknown or unspecified country')], default='Zambia', max_length=200, verbose_name='Nationality')),
                ('marital_status', models.CharField(choices=[('---------', '---------'), ('Single', 'Single'), ('Married', 'Married'), ('Widowed', 'Widowed'), ('Divorced', 'Divorced'), ('Separated', 'Separated')], default='Single', max_length=200, verbose_name='Marital Status')),
                ('physical_address', models.CharField(default='', max_length=200, verbose_name='Physical Address')),
                ('postal_address', models.CharField(blank=True, max_length=200, null=True, verbose_name='Postal Address')),
                ('state_of_any_disabilities', models.CharField(blank=True, max_length=200, null=True, verbose_name='State Disabilities If Any')),
                ('sponsors_name_or_next_of_kin', models.CharField(blank=True, max_length=200, null=True, verbose_name='Sponsor’s Name Or Next of Kin')),
                ('relationship_with_sponsor_or_next_of_kin', models.CharField(blank=True, choices=[('Father', 'Father'), ('Mother', 'Mother'), ('Brother', 'Brother'), ('Sister', 'Sister'), ('Uncle', 'Uncle'), ('Aunty', 'Aunty'), ('Cousin', 'Cousin'), ('Grand-Parent', 'Grand-Parent'), ('Husband', 'Husband'), ('Wife', 'Wife'), ('Other', 'Other')], max_length=200, null=True, verbose_name='Relationship with Sponsor Or Next Of Kin')),
                ('sponsor_or_next_of_kin_cell_no', models.CharField(blank=True, max_length=200, null=True, verbose_name='Sponsor Or Next of Kin Cell No')),
                ('sponsor_or_next_of_kin_address', models.CharField(blank=True, max_length=200, null=True, verbose_name='Sponsor Or Next of Kin Address')),
                ('school_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='School Name')),
                ('school_start_year', models.DateField(blank=True, max_length=200, null=True, verbose_name='Start Year')),
                ('school_end_year', models.DateField(blank=True, max_length=200, null=True, verbose_name='End Year')),
                ('subject_english', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='English')),
                ('subject_mathematics', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Mathematics')),
                ('subject_biology_human_and_social', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Biology/Human & Social')),
                ('subject_history', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='History')),
                ('subject_religious_education', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Religious Education')),
                ('subject_commerce', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Commerce')),
                ('subject_home_economics', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Home Economics')),
                ('subject_geography', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Geography')),
                ('subject_physical_science', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Physical Science')),
                ('subject_chemistry', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Chemistry')),
                ('subject_physics', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Physics')),
                ('subject_civic_education', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Civic Education')),
                ('has_certificate', models.BooleanField(default=False, max_length=200, verbose_name='Certificate')),
                ('has_diploma', models.BooleanField(default=False, max_length=200, verbose_name='Diploma')),
                ('has_degree', models.BooleanField(default=False, max_length=200, verbose_name='Degree')),
                ('has_gce', models.BooleanField(default=False, max_length=200, verbose_name='GCE')),
                ('scanned_deposit_slip', models.FileField(upload_to="payments/deposits/%Y/%m/%d'")),
                ('scanned_nrc_front', models.FileField(blank=True, null=True, upload_to="id/nrc/%Y/%m/%d'")),
                ('scanned_nrc_back', models.FileField(blank=True, null=True, upload_to="id/nrc/%Y/%m/%d'")),
                ('scanned_statement_of_result', models.FileField(upload_to="qualifications/statement_of_result/%Y/%m/%d'")),
                ('scanned_pq_certificate', models.FileField(blank=True, null=True, upload_to="qualifications/professional_qualification/%Y/%m/%d'")),
                ('scanned_pq_diploma', models.FileField(blank=True, null=True, upload_to="qualifications/professional_qualification/%Y/%m/%d'")),
                ('scanned_pq_degree', models.FileField(blank=True, null=True, upload_to="qualifications/professional_qualification/%Y/%m/%d'")),
                ('declaration_confirmation', models.BooleanField(default=False, verbose_name='I have read the declaration')),
                ('application_status', models.CharField(blank=True, choices=[('Verified', 'Verified'), ('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], default='Pending', max_length=200, null=True, verbose_name='Application Status')),
                ('application_stage', models.CharField(choices=[('Admissions Office', 'Admissions Office'), ('Accounts Office', 'Accounts Office'), ('Dean Of Students Affairs Office', 'Dean Of Students Affairs Office'), ('ICT Office', 'ICT Office'), ('Program Coordinator or Principal Lecturer Office', 'Program Coordinator or Principal Lecturer Office'), ('Registrar Office', 'Registrar Office'), ('Lecturer', 'Lecturer'), ('Examinations Office', 'Examinations Office'), ('Other Staff', 'Other Staff')], default='Admissions Office', max_length=200, verbose_name='Application Stage')),
                ('admissions_office', models.BooleanField(default=False, max_length=200, verbose_name='Admissions Office')),
                ('admissions_office_comment', models.TextField(blank=True, null=True, verbose_name='Admissions Office Comment')),
                ('accounts_office', models.BooleanField(default=False, max_length=200, verbose_name='Accounts Office')),
                ('accounts_office_comment', models.TextField(blank=True, null=True, verbose_name='Accounts Office Comment')),
                ('dean_of_students_affairs_office', models.BooleanField(default=False, max_length=200, verbose_name='Dean Of Students Affairs')),
                ('dean_of_students_affairs_office_comment', models.TextField(blank=True, null=True, verbose_name='Deans Office Comment')),
                ('ict_office', models.BooleanField(default=False, max_length=200, verbose_name='ICT Office')),
                ('ict_office_comment', models.TextField(blank=True, null=True, verbose_name='ICT Office Comment')),
                ('program_coordinator_or_principal_lecturer_office', models.BooleanField(default=False, max_length=200, verbose_name='Program Coordinator Or Principal Lecturer')),
                ('program_coordinator_or_principal_lecturer_office_comment', models.TextField(blank=True, null=True, verbose_name='PG Coordinator Office Comment')),
                ('registrar_office', models.BooleanField(default=False, max_length=200, verbose_name='Registrar')),
                ('registrar_office_comment', models.TextField(blank=True, null=True, verbose_name='Registrar Office Comment')),
                ('temp_password', models.CharField(blank=True, max_length=200, null=True, verbose_name='Temp Password')),
                ('balance_due', models.CharField(blank=True, max_length=200, null=True, verbose_name='Balance Due')),
                ('admission_date', models.DateTimeField(auto_now_add=True, verbose_name='Admission Date')),
                ('is_active', models.BooleanField(default=True)),
                ('accounts_office_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='accounts_office', to=settings.AUTH_USER_MODEL)),
                ('admissions_office_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='admissions_office_user', to=settings.AUTH_USER_MODEL)),
                ('dean_of_students_affairs_office_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='dean_of_students_affairs_user', to=settings.AUTH_USER_MODEL)),
                ('ict_office_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ict_office_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Assessment Name')),
                ('total_marks', models.FloatField(blank=True, default=0, null=True, verbose_name='Score')),
                ('date', models.DateTimeField(verbose_name='Date Of Assessment')),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_type', models.CharField(blank=True, max_length=200, null=True, verbose_name='Assessment Type')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_name', models.CharField(max_length=200, verbose_name='Course Name')),
                ('course_code', models.CharField(max_length=200, verbose_name='Course Code')),
                ('course_description', models.TextField(blank=True, null=True, verbose_name='Course Description')),
                ('semester', models.CharField(choices=[('Semester 1', 'Semester 1'), ('Semester 2', 'Semester 2')], max_length=200, null=True, verbose_name='Semester')),
                ('full_or_half_course', models.CharField(choices=[('Half', 'Half'), ('Full', 'Full')], max_length=200, null=True, verbose_name='Full/half Course')),
                ('contact_hours', models.CharField(blank=True, max_length=200, null=True, verbose_name='Contact Hours')),
                ('credits', models.CharField(blank=True, max_length=200, null=True, verbose_name='Credits')),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department_name', models.CharField(max_length=200)),
                ('department_description', models.TextField(blank=True, null=True)),
                ('hod', models.ForeignKey(default='', help_text='Head of department', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(help_text='Year, eg: Year 1 or Year 2', max_length=200, verbose_name='Year')),
            ],
            options={
                'verbose_name': 'Level/Year of Study',
                'verbose_name_plural': 'Levels/Years of Study',
            },
        ),
        migrations.CreateModel(
            name='PaymentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_type_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Payment Type')),
            ],
            options={
                'verbose_name': 'Payment Type',
                'verbose_name_plural': 'Payment Type',
            },
        ),
        migrations.CreateModel(
            name='ProgramType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pg_type_name', models.CharField(max_length=200, verbose_name='Program Type Name')),
                ('pg_type_description', models.TextField(blank=True, null=True, verbose_name='Program Type Description')),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_name', models.CharField(max_length=200)),
                ('school_description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schoolname', models.CharField(default='', max_length=500, verbose_name='Name Of School')),
                ('address', models.CharField(blank=True, default='School Address', max_length=200, null=True, verbose_name='School Address')),
                ('email', models.CharField(blank=True, default='exampleemail@exampleemail.com', max_length=200, null=True, verbose_name='Email Address')),
                ('facebook', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Facebook Page Link')),
                ('twitter', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Twitter')),
                ('instagram', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Instagram')),
                ('phone', models.CharField(blank=True, default='Tel/Cell Number', max_length=200, null=True, verbose_name='Tel/Cell')),
                ('photo', models.ImageField(blank=True, default='', null=True, upload_to='school/logo/%Y/%m/%d', verbose_name='School logo')),
            ],
            options={
                'verbose_name': 'School Details',
                'verbose_name_plural': 'School Details',
            },
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.CharField(blank=True, choices=[('Semester 1', 'Semester 1'), ('Semester 2', 'Semester 2')], max_length=200)),
                ('is_current_semester', models.BooleanField(blank=True, default=False, null=True)),
                ('session', models.CharField(help_text='2022/2023', max_length=200, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session', models.CharField(help_text='2022/2023', max_length=200, unique=True)),
                ('is_current_session', models.BooleanField(blank=True, default=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_registration_date', models.DateField(auto_now_add=True, verbose_name='Registration Date')),
                ('level', models.ForeignKey(default='Year 1', on_delete=django.db.models.deletion.CASCADE, to='schoolapp.level', verbose_name='Current Year Of Study')),
            ],
        ),
        migrations.CreateModel(
            name='StudentNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_student_no', models.CharField(max_length=10, verbose_name='Full Student Number')),
            ],
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_no_last_digits_length', models.IntegerField(blank=True, help_text='The number of digits after the date on the student number: YYMMdigits', null=True, verbose_name='Last Digits Length')),
            ],
            options={
                'verbose_name_plural': 'System Settings',
            },
        ),
        migrations.CreateModel(
            name='WucFiles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True, upload_to="wuc/files/%Y/%m/%d'")),
            ],
            options={
                'verbose_name': 'Wuc File',
                'verbose_name_plural': 'Wuc Files',
            },
        ),
        migrations.CreateModel(
            name='WrittenAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(blank=True, default=0, null=True, verbose_name='Score')),
                ('written_on', models.DateField(auto_now_add=True, verbose_name='Written on')),
                ('assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='written_assessment', to='schoolapp.assessment')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schoolapp.semester')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_written_assessment', to='schoolapp.student')),
            ],
        ),
        migrations.CreateModel(
            name='Timetable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[('Sun', 'Sunday'), ('Mon', 'Monday'), ('Tue', 'Tuesday'), ('Wed', 'Wednesday'), ('Thur', 'Thursday'), ('Fri', 'Friday'), ('Sat', 'Saturday')], max_length=20, verbose_name='Day')),
                ('start_time', models.TimeField(verbose_name='Start Time')),
                ('end_time', models.TimeField(verbose_name='End Time')),
                ('venue', models.CharField(blank=True, help_text='Optional', max_length=200, null=True, verbose_name='Venue')),
                ('description', models.CharField(blank=True, help_text='Optional', max_length=200, null=True, verbose_name='Description')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schoolapp.course')),
            ],
        ),
        migrations.CreateModel(
            name='TakenCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False)),
                ('registration_type', models.CharField(choices=[('Repeat Registration', 'Repeat Registration'), ('Normal Registration', 'Normal Registration')], default='Normal Registration', max_length=200)),
                ('assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='course_assessment', to='schoolapp.assessment')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taken_courses', to='schoolapp.course')),
                ('semester', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='schoolapp.semester')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schoolapp.student')),
            ],
        ),
        migrations.AddField(
            model_name='student',
            name='registered_courses',
            field=models.ManyToManyField(through='schoolapp.TakenCourse', to='schoolapp.course'),
        ),
        migrations.AddField(
            model_name='student',
            name='student_admission_details',
            field=models.ForeignKey(blank=True, help_text='search by student number', null=True, on_delete=django.db.models.deletion.SET_NULL, to='schoolapp.admission'),
        ),
        migrations.AddField(
            model_name='student',
            name='user',
            field=models.OneToOneField(help_text='search by student number', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='SchoolClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classname', models.CharField(default='', help_text='name of class, (eg. A)', max_length=200, verbose_name='Enter Class Title')),
                ('courses', models.ManyToManyField(help_text='Hold Ctrl to choose multiple', related_name='class_subject', to='schoolapp.course', verbose_name='Choose Courses')),
                ('grade', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='schoolapp.level', verbose_name='Level')),
                ('lecturer', models.ForeignKey(default='', max_length=200, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Assign Lecturer')),
            ],
            options={
                'verbose_name': 'School Class',
                'verbose_name_plural': 'School Classes',
            },
        ),
        migrations.CreateModel(
            name='PupilAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mark_attendance', models.CharField(choices=[('Present', 'Present'), ('Absent', 'Absent')], default='Present', max_length=50)),
                ('daysdate', models.DateField(default='', verbose_name='Attended On')),
                ('nameofclass', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='schoolapp.schoolclass', verbose_name='Class')),
                ('student', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='schoolapp.student', verbose_name='Student')),
            ],
            options={
                'verbose_name': 'Student Attendance',
                'verbose_name_plural': 'Student Attendance',
            },
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('program_name', models.CharField(max_length=200)),
                ('program_code', models.CharField(blank=True, max_length=200, null=True)),
                ('program_description', models.TextField()),
                ('program_duration', models.CharField(blank=True, max_length=200, null=True, verbose_name='Duration')),
                ('program_coordinator', models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('program_school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schoolapp.school')),
                ('program_type', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='schoolapp.programtype')),
                ('program_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='schoolapp.level')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.CharField(choices=[('Semester 1', 'Semester 1'), ('Semester 2', 'Semester 2')], max_length=200, null=True, verbose_name='Semester')),
                ('amount_to_be_paid', models.DecimalField(decimal_places=2, default=0, max_digits=20, verbose_name='Amount To Be Paid')),
                ('payment_description', models.ForeignKey(default='', help_text='payment for?', on_delete=django.db.models.deletion.CASCADE, to='schoolapp.paymenttype', verbose_name='Payment Type')),
                ('payment_level', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='schoolapp.level', verbose_name='Year')),
                ('program', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='schoolapp.program', verbose_name='Program')),
            ],
            options={
                'verbose_name': 'Payment Structure',
                'verbose_name_plural': 'Payment Structure',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amountpaid', models.DecimalField(decimal_places=2, default=0, max_digits=20, verbose_name='Total Amount Paid')),
                ('actualamountpaid', models.DecimalField(decimal_places=2, default=0, editable=False, max_digits=20, verbose_name='Actual Amount Paid')),
                ('balance', models.DecimalField(decimal_places=2, default=0, editable=False, max_digits=20, verbose_name='Balance')),
                ('paymentstatus', models.CharField(blank=True, default='Fully Paid', editable=False, max_length=30, null=True)),
                ('paymentdate', models.DateField(auto_now=True, verbose_name='Payment Date')),
                ('total_amount_to_be_paid', models.DecimalField(decimal_places=2, default=0, editable=False, max_digits=20, verbose_name='Total Amount To Be Paid')),
                ('paymentstructure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='schoolapp.paymentstructure', verbose_name='Payment Structure')),
                ('semester', models.ForeignKey(blank=True, default='', null=True, on_delete=django.db.models.deletion.CASCADE, to='schoolapp.semester', verbose_name='Academic Session')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='schoolapp.student', verbose_name='Student Name')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
            },
        ),
        migrations.CreateModel(
            name='FinalResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total', models.FloatField(blank=True, editable=False, help_text='Adds All Assessments For the Current Semester', null=True)),
                ('grade', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('F', 'F')], editable=False, max_length=1)),
                ('comment', models.CharField(blank=True, choices=[('PASS', 'PASS'), ('FAIL', 'FAIL')], editable=False, max_length=200)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schoolapp.course')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schoolapp.semester')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schoolapp.student')),
            ],
        ),
        migrations.CreateModel(
            name='ExamTimeTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('venue', models.CharField(blank=True, max_length=200, null=True)),
                ('additional_info', models.TextField(blank=True, max_length=1000, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schoolapp.course')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schoolapp.semester')),
            ],
        ),
        migrations.CreateModel(
            name='DepartmentOfTeacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lecturer', models.CharField(default='', max_length=200, verbose_name='Lecturer')),
                ('department', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='schoolapp.department', verbose_name='Name Of Department')),
            ],
            options={
                'verbose_name': 'Lecturer And Department',
                'verbose_name_plural': 'Lecturer And Department',
            },
        ),
        migrations.CreateModel(
            name='CourseAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('courses', models.ManyToManyField(related_name='allocated_course', to='schoolapp.course')),
                ('lecturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='schoolapp.session')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='course_program',
            field=models.ForeignKey(help_text='Program to which the course belongs', null=True, on_delete=django.db.models.deletion.SET_NULL, to='schoolapp.program', verbose_name='Program'),
        ),
        migrations.AddField(
            model_name='course',
            name='level',
            field=models.ForeignKey(help_text='Year, eg: Year 1 or Year 2', null=True, on_delete=django.db.models.deletion.SET_NULL, to='schoolapp.level', verbose_name='Year'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='assessment_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='type_of_assessment', to='schoolapp.assessmenttype'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='course',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='course_assessed', to='schoolapp.course'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('announcement', models.TextField(max_length=10000, verbose_name='News Details')),
                ('announcementdatetime', models.DateTimeField(auto_now=True, verbose_name='Date')),
                ('teacher', models.ForeignKey(max_length=200, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Lecturers Name')),
            ],
            options={
                'verbose_name': 'Announcement',
                'verbose_name_plural': 'Announcements',
            },
        ),
        migrations.AddField(
            model_name='admission',
            name='intake',
            field=models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='schoolapp.session', verbose_name='In-take'),
        ),
        migrations.AddField(
            model_name='admission',
            name='program_applied_for',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='schoolapp.program', verbose_name='Program of Choice'),
        ),
        migrations.AddField(
            model_name='admission',
            name='program_coordinator_or_principal_lecturer_office_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='program_coordinator_or_principal_lecturer_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='admission',
            name='registrar_office_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='registrar_office_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='admission',
            name='scanned_gce_results',
            field=models.ManyToManyField(blank=True, to='schoolapp.wucfiles'),
        ),
        migrations.AddField(
            model_name='admission',
            name='student_number',
            field=models.ForeignKey(default='', max_length=200, on_delete=django.db.models.deletion.CASCADE, to='schoolapp.studentnumber', verbose_name='Student Number'),
        ),
    ]
